// Generated by CoffeeScript 1.6.2
(function() {
  var Glitcher;

  Glitcher = (function() {
    function Glitcher(canvas, delay, glitch_rarity, reset_rarity) {
      if (delay == null) {
        delay = 100;
      }
      if (glitch_rarity == null) {
        glitch_rarity = 200;
      }
      if (reset_rarity == null) {
        reset_rarity = -1;
      }
      this.canvas = canvas;
      this.delay = delay;
      this.glitch_rarity = glitch_rarity;
      this.reset_rarity = reset_rarity;
    }

    Glitcher.prototype.load_url = function(url, header_lines_num) {
      var t;

      if (header_lines_num == null) {
        header_lines_num = 5;
      }
      t = this;
      this.image = new Image;
      this.image.onload = function() {
        var data;

        t.load_canvas();
        data = t.canvas.toDataURL("image/jpeg", 1);
        t.load_data(data, header_lines_num);
        return t.image.onload = function() {
          return t.load_canvas();
        };
      };
      return this.image.src = url;
    };

    Glitcher.prototype.load_data = function(data, header_lines_num) {
      if (header_lines_num == null) {
        header_lines_num = 5;
      }
      this.encoding = data.split(",")[0];
      this.old_string = this.string = window.atob(data.split(",")[1]);
      return this.header_lines_num = header_lines_num;
    };

    Glitcher.prototype.load_canvas = function() {
      this.context = this.canvas.getContext("2d");
      this.canvas.setAttribute('width', this.image.width);
      this.canvas.setAttribute('height', this.image.height);
      return this.context.drawImage(this.image, 0, 0, this.image.width, this.image.height);
    };

    Glitcher.prototype.start = function() {
      var t;

      t = this;
      return this.loop = window.setInterval(function() {
        return t.glitch();
      }, this.delay);
    };

    Glitcher.prototype.stop = function() {
      if (this.loop !== void 0) {
        window.clearInterval(this.loop);
        return this.loop = void 0;
      }
    };

    Glitcher.prototype.save = function() {
      return window.open(data(), "_blank");
    };

    Glitcher.prototype.glitch = function() {
      this.glitch_function();
      this.image.src = this.data();
      if (Math.floor(Math.random() * this.reset_rarity) === 0) {
        return this.reset();
      }
    };

    Glitcher.prototype.glitch_function = function() {
      return this.replace_text("abcdef", "abcdef", this.glitch_rarity);
    };

    Glitcher.prototype.data = function() {
      return this.encoding + "," + window.btoa(this.string);
    };

    Glitcher.prototype.reset = function() {
      this.string = this.old_string;
      return this.image.src = this.data();
    };

    Glitcher.prototype.encoding = function() {
      return this.encoding;
    };

    Glitcher.prototype.string = function() {
      return this.string;
    };

    Glitcher.prototype.lines = function() {
      return this.string.split("\n");
    };

    Glitcher.prototype.header_lines = function() {
      return this.lines().slice(0, +(this.header_lines_num - 1) + 1 || 9e9);
    };

    Glitcher.prototype.header = function() {
      return this.header_lines().join("\n");
    };

    Glitcher.prototype.body_lines = function() {
      return this.lines().slice(this.header_lines_num);
    };

    Glitcher.prototype.body = function() {
      return this.body_lines().join("\n");
    };

    Glitcher.prototype.shuffle = function(a) {
      var i, j, t;

      a = this.body_lines();
      i = a.length;
      while (--i > 0) {
        j = ~~(Math.random() * (i + 1));
        t = a[j];
        a[j] = a[i];
        a[i] = t;
      }
      return a;
    };

    Glitcher.prototype.shuffle_batches = function(size) {
      var a, batches, i, lines;

      if (size == null) {
        size = 5;
      }
      a = this.body_lines();
      batches = [
        (function() {
          var _i, _ref, _results;

          _results = [];
          for (i = _i = 0, _ref = Math.ceil(a.length / size); 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(a.slice(i * size, (i + 1) * size - 1));
          }
          return _results;
        })()
      ];
      batches = this.shuffle(batches);
      lines = [].concat.apply([], batches);
      return this.string = this.header() + "\n" + lines.join("\n");
    };

    Glitcher.prototype.replace_text = function(old, nu, rarity) {
      var regexp;

      if (rarity == null) {
        rarity = 50;
      }
      regexp = new RegExp("[" + old + "]", "gm");
      return this.string = this.header() + "\n" + this.body().replace(regexp, function(match) {
        if (Math.floor(Math.random() * rarity) === 0) {
          return nu[Math.floor(Math.random() * nu.length)];
        } else {
          return match;
        }
      });
    };

    Glitcher.prototype.braid_text = function(old, rarity) {
      var regexp;

      if (rarity == null) {
        rarity = 50;
      }
      regexp = new RegExp("([^\s])(" + old + ")([^\s])", "gm");
      return this.string = this.header() + "\n" + this.body().replace(regexp, function(match, p1, p2, p3) {
        if (Math.floor(Math.random() * rarity) === 0) {
          if (Math.floor(Math.random() * 2) === 0) {
            return p2 + p1 + p3;
          } else {
            return p1 + p3 + p2;
          }
        } else {
          return match;
        }
      });
    };

    Glitcher.prototype.set_delay = function(delay) {
      this.delay = delay;
      if (this.loop !== void 0) {
        this.stop();
        return this.start();
      }
    };

    Glitcher.prototype.set_glitch_rarity = function(rarity) {
      return this.glitch_rarity = rarity;
    };

    return Glitcher;

  })();

  if (typeof module !== "undefined" && module.exports) {
    exports.Glitcher = Glitcher;
  } else {
    window.Glitcher = Glitcher;
  }

}).call(this);
